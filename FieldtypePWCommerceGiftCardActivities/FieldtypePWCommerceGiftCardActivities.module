<?php

namespace ProcessWire;

/**
 * FieldtypePWCommerceGiftCardActivities for ProcessWire.
 *
 * This Fieldtype stores values for PWCommerce notes.
 *
 * @author Francis Otieno (Kongondo) <kongondo@gmail.com> kongondo.com
 *
 *
 *
 * FieldtypePWCommerceGiftCardActivities for PWCommerce
 * Copyright (C) 2023 by Francis Otieno
 * MIT License
 *
 */

class FieldtypePWCommerceGiftCardActivities extends FieldtypeMulti
{

	public static function getModuleInfo() {
		return array(
			'title' => 'PWCommerce Gift Card Activities: Fieldtype',
			'author' => 'Francis Otieno (Kongondo)',
			'version' => "100",
			'href' => 'https://kongondo.com',
			'summary' => 'Field that stores PWCommerce gift card activities.',
			'installs' => 'InputfieldPWCommerceGiftCardActivities',
		);
	}

	/**
	 * We keep a copy of the $page that owns these notes so that we can follow
	 * its outputFormatting state and change our output per that state
	 *
	 */
	// @for use in InputfieldPWCommerceGiftCardActivities
	protected $page;

	/**
	 * Return the required Inputfield used to populate a field of this type
	 *
	 */
	public function getInputfield(Page $page, Field $field) {
		$inputfield = $this->wire('modules')->get("InputfieldPWCommerceGiftCardActivities");
		// our inputfield requires a Page and Field
		// @note: these two are methods in InputfieldPWCommerceGiftCardActivities
		$inputfield->setPage($page);
		$inputfield->setField($field);
		return $inputfield;
	}

	/**
	 * Get a blank value of this type, i.e. return a blank WireArray
	 *
	 * @param Page $page
	 * @param Field $field
	 * @return WireArray
	 *
	 */
	public function getBlankValue(Page $page, Field $field) {
		$wireArray = new WireArray();
		$wireArray->setTrackChanges(true);
		return $wireArray;
	}

	/**
	 * Get a blank single item value of this type, i.e. return a blank WireData
	 *
	 * @param Page $page
	 * @param Field $field
	 * @return WireData
	 *
	 */
	public function getBlankRecord() {
		return new WireData();
	}

	/**
	 * set the config option fields for this Field
	 * These appear in the 'Details' Tab when editing an instance of this Field
	 */
	public function ___getConfigInputfields(Field $field) {
		$inputfields = parent::___getConfigInputfields($field);
		return $inputfields;
	}

	// @credits: borrowed from ProcessWire FieldtypeDatetime.module
	/**
	 * Sanitize a value assumed to be either a timestamp or in strtotime() compatible format
	 *
	 * @param string|int|\DateTime
	 * @return int|string Returns unix timestamp integer or blank string if empty or invalid value
	 *
	 */
	protected function _sanitizeValue($value) {
		if (empty($value)) {
			// empty value
			$value = '';
		} elseif (is_int($value)) {
			// value okay as-is
		} elseif ($value instanceof \DateTime) {
			// instance of DateTime
			$value = $value->getTimestamp();
		} elseif (ctype_digit(ltrim("$value", '-'))) {
			// already a timestamp
			$value = (int) $value;
		} else {
			// convert date string to time
			$value = strtotime($value);
			if ($value === false) {
				$value = '';
			}
		}
		return $value;
	}

	/**
	 * Given a raw value (value as stored in DB), return the value as it would appear in a Page object
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param string|int|array $value
	 * @return string|int|array|object $value
	 *
	 */
	public function ___wakeupValue(Page $page, Field $field, $value) {

		// if for some reason we already get a valid value, then just return it
		if ($value instanceof WireArray) {
			return $value;
		}

		// start a blank value to be populated
		$records = $this->getBlankValue($page, $field);

		// if we were given a blank value, then we've got nothing to do: just return a blank WireArray
		if (empty($value) || !is_array($value)) {
			return $records;
		}

		bdb($value, __METHOD__ . ': $value at line #' . __LINE__);

		$cnt = 1; // @note: for temporary runtime ID

		// create new WireData objects from each item in the array
		foreach ($value as $v) {

			$record = $this->getBlankRecord();

			// ORDER ID
			// note we are converting 'data' to 'record->orderID' (the order ID to which this gift card activity relates)
			$orderID = (int) $v['data'];
			$record->orderID = $orderID;
			// aliases
			$record->order = $orderID;

			//--------
			// ACTIVITY DATE
			// ** gift card usage/activity date **
			// TODO: UNSURE IF TO RETURN TIMESTAMP OR TIME STRING! MAYBE EXTRA VARIABLE FOR THIS?
			$activityDate = $v['activity_date'];
			if (empty($activityDate)) {
				$activityDate = '';
			} else {
				$activityDate = strtotime($activityDate);
				if ($activityDate === false) {
					$activityDate = '';
				}
			}

			$record->activityDate = $activityDate;
			// aliases
			$record->activity = $activityDate;
			$record->date = $activityDate;


			//--------
			// AMOUNT/REDEEMED VALUE
			$amount = (float) $value['amount'];
			$record->amount = $amount;
			// aliases
			$record->value = $amount;
			$record->redeemed = $amount;

			// ============= RUNTIME VALUES
			$record->id = $cnt;
			bdb($record, __METHOD__ . ': $record at line #' . __LINE__);



			//---------
			$cnt++;


			//----------------
			$record->resetTrackChanges();

			$records->add($record); // add to records

		} // end foreach $value as $v

		bdb($records, __METHOD__ . ': $records at line #' . __LINE__);

		// tell it to start tracking changes from this point forward
		$records->resetTrackChanges(); // reset track changes for all records

		return $records;
	}

	/**
	 * Given an 'awake' value, as set by wakeupValue, convert the value back to a basic type for storage in DB.
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param string|int|array|object $value
	 * @return string|int
	 *
	 */
	public function ___sleepValue(Page $page, Field $field, $value) {

		$sleepValue = [];

		// if we are given something other than an WireArray,
		// then just return a blank array
		if (!$value instanceof WireArray) {
			return $sleepValue;
		}

		// convert each record to an array within sleepValue
		foreach ($value as $record) {

			// make the activities sort by record->activityDate descending (newest first)
			$value->sort('-activityDate');
			//--------------
			$sleepValue[] = array(
				// note: record->orderID is becoming data which is a required column in a Fieldtype
				'data' => (int) $record->orderID,
				'activity_date' => date('Y-m-d H:i:s', $this->_sanitizeValue($record->activityDate)),
				'amount' => (float) $record->amount,
			);
		}

		return $sleepValue;
	}

	/**
	 * Given a value, make it clean for storage within a Page
	 *
	 */
	public function sanitizeValue(Page $page, Field $field, $value) {

		// if given a blank value, return a valid blank value
		if (empty($value)) {
			return $this->getBlankValue($page, $field);
		}

		// if given something other than an WireArray, throw an error
		if (!$value instanceof WireArray) {
			throw new WireException("Value set to field '$field->name' must be a WireArray");
		}

		return $value;
	}

	/**
	 * Format a value for output, called when a Page's outputFormatting is on
	 *
	 */
	public function formatValue(Page $page, Field $field, $value) {
		// TODO: NOT NEEDED?
		return $value;
	}

	/**
	 * Return the database schema that defines a product property item
	 *
	 */
	public function getDatabaseSchema(Field $field) {

		$schema = parent::getDatabaseSchema($field);

		// we reuse this required field/column (data) for item->orderID [order_id]
		$schema['data'] = 'INT(10) UNSIGNED NOT NULL';
		// @note: default to current timestamp ONLY; no auto-update
		$schema['activity_date'] = 'DATETIME DEFAULT CURRENT_TIMESTAMP';
		$schema['amount'] = 'DECIMAL(12,2) NOT NULL'; # @NOTE: SIGNED! 'redemptions negative'; refunds positive


		// indexes, for any fields that need to be searchable from selectors
		// make all our fields searchable
		//--------------
		// for 'order id (the order against which gift card was redeemed)'
		$schema['keys']['data'] = 'KEY data(data)';
		$schema['keys']['activity_date'] = 'KEY activity_date(activity_date)';
		$schema['keys']['amount'] = 'KEY amount(amount)';


		return $schema;
	}

	/**
	 * Method called when the field is database-queried from a selector
	 *
	 */
	public function getMatchQuery($query, $table, $subfield, $operator, $value) {


		if (in_array($subfield, ['orderID', 'order_id', 'order'])) {
			// if searching 'orderID' (or its aliases) then assume our default (data) field
			$subfield = 'data';
		} else if (in_array($subfield, ['activityDate', 'activity', 'date'])) {
			// else if searching for 'activity_date' using aliases
			$subfield = 'activity_date';
		} else if (in_array($subfield, ['value', 'redeemed'])) {
			// else if searching for 'amount' using aliases
			$subfield = 'amount';
		}


		/*
						- MySQL knows what "=" and ">" are, but it doesn't know what "%=", "~=", "^=" OR "$=" are
						- the latter allow for finer, fulltext search
						*/
		// if 'normal' sql operators, do 'normal' query, else do fulltext search
		if ($this->wire('database')->isOperator($operator)) {
			return parent::getMatchQuery($query, $table, $subfield, $operator, $value);
		} else {
			$ft = new DatabaseQuerySelectFulltext($query);
			$ft->match($table, $subfield, $operator, $value);
			return $query;
		}
	}
}