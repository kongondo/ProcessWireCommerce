<?php

namespace ProcessWire;

/**
 * PWCommerce: FieldtypePWCommerceGiftCard
 *
 * Fieldtype that stores and outputs values of a PWCommerce shipping rate values.
 *
 * @author Francis Otieno (Kongondo) <kongondo@gmail.com> kongondo.com
 *
 *
 *
 * FieldtypePWCommerceGiftCard for PWCommerce
 * Copyright (C) 2023 by Francis Otieno
 * MIT License
 *
 */

class FieldtypePWCommerceGiftCard extends Fieldtype
{

	public static function getModuleInfo() {
		return array(
			'title' => 'PWCommerce Gift Card: Fieldtype',
			'author' => 'Francis Otieno (Kongondo)',
			'version' => "100",
			'href' => 'http://kongondo.com',
			'summary' => 'Field that stores a PWCommerce gift card values.',
			'installs' => 'InputfieldPWCommerceGiftCard',
		);
	}

	/**
	 * Return the required Inputfield used to populate a field of this type.
	 *
	 */
	public function getInputfield(Page $page, Field $field) {
		// $inputfield = $this->modules->get("InputfieldPWCommerceGiftCard");
		$inputfield = $this->wire('modules')->get("InputfieldPWCommerceGiftCard");
		// our inputfield requires a Page and Field
		// @note: easier to set this way than using set() since we will then have to check keys
		$inputfield->setPage($page); // this is a method in InputfieldPWCommerceGiftCard
		$inputfield->setField($field); // this is a method in InputfieldPWCommerceGiftCard
		// $inputfield->set('page', $page);
		// $inputfield->set('field', $field);
		return $inputfield;
	}

	/**
	 * Return a blank ready-to-populate version of a field of this type.
	 *
	 */
	public function getBlankValue(Page $page, Field $field) {
		$record = new WireData();
		$record->setTrackChanges(true);
		return $record;
	}

	/**
	 * Set the config option fields for this Field.
	 *
	 * These appear in the 'Details' Tab when editing an instance of this Field.
	 *
	 */
	public function ___getConfigInputfields(Field $field) {
		$inputfields = parent::___getConfigInputfields($field);
		return $inputfields;
	}

	/**
	 * Format a value for output, called when a Page's outputFormatting is on.
	 *
	 */
	public function formatValue(Page $page, Field $field, $value) {
		// TODO:???
		return $value;
	}

	/**
	 * Given a value, make it clean for storage within a Page
	 * Implementation is required by Fieldtype modules, as this method is abstract.
	 * This method should remove anything that's invalid from the given value. If it can't be sanitized, it should be made blank.
	 */
	public function sanitizeValue(Page $page, Field $field, $value) {

		// if given a blank value, return a valid blank value
		if (empty($value)) {
			return $this->getBlankValue($page, $field);
		}

		// if given something other than an WireData, throw an error
		if (!$value instanceof WireData) {
			throw new WireException("Value set to field '$field->name' must be a WireData");
		}

		return $value;
	}

	// @credits: borrowed from ProcessWire FieldtypeDatetime.module
	/**
	 * Sanitize a value assumed to be either a timestamp or in strtotime() compatible format
	 *
	 * @param string|int|\DateTime
	 * @return int|string Returns unix timestamp integer or blank string if empty or invalid value
	 *
	 */
	protected function _sanitizeValue($value) {
		if (empty($value)) {
			// empty value
			$value = '';
		} elseif (is_int($value)) {
			// value okay as-is
		} elseif ($value instanceof \DateTime) {
			// instance of DateTime
			$value = $value->getTimestamp();
		} elseif (ctype_digit(ltrim("$value", '-'))) {
			// already a timestamp
			$value = (int) $value;
		} else {
			// convert date string to time
			$value = strtotime($value);
			if ($value === false) {
				$value = '';
			}
		}
		return $value;
	}

	/**
	 * Given a raw value (value as stored in DB), return the value as it would appear in a Page object.
	 *
	 * @param Page $page.
	 * @param Field $field.
	 * @param string|int|array $value.
	 * @access public
	 * @return string|int|array|object $value.
	 *
	 */
	public function ___wakeupValue(Page $page, Field $field, $value) {
		// if for some reason we already got a valid value, then just return it
		if ($value instanceof WireData) {
			return $value;
		}

		// start a blank value to be populated
		$record = $this->getBlankValue($page, $field);

		// if we were given a blank value, then we've got nothing to do: just return getBlankValue
		if (empty($value) || !is_array($value)) {

			return $record;
		}

		$sanitizer = $this->wire('sanitizer');

		// GIFT CARD PRODUCT ID
		// note we are converting 'data' to 'record->giftCardProductID'
		$giftCardProductID = (int) $value['data'];

		$record->giftCardProductID = $giftCardProductID;
		// aliases
		$record->productID = $giftCardProductID;
		$record->product = $giftCardProductID;
		// @NOTE/TODO - not interested in the page object but could change this in the future.

		//--------
		// GIFT CARD PRODUCT VARIANT ID
		$giftCardProductVariantID = (int) $value['gift_card_product_variant_id'];

		$record->giftCardProductVariantID = $giftCardProductVariantID;
		// aliases
		$record->productVariantID = $giftCardProductVariantID;
		$record->variantID = $giftCardProductVariantID;
		$record->variant = $giftCardProductVariantID;
		// @NOTE/TODO - not interested in the page object but could change this in the future.

		//--------
		// GIFT CARD CUSTOMER EMAIL
		$customerEmail = $sanitizer->email($value['customer_email']);

		$record->customerEmail = $customerEmail;
		// aliases
		$record->email = $customerEmail;

		//--------
		// GIFT CARD CODE
		$code = $sanitizer->text($value['code']);

		$record->code = $code;
		// aliases
		$record->giftCardCode = $code;

		//--------
		// TODO @UPDATE NO LONGER IN USE
		/*
														// GIFT CARD START DATE
														// TODO: UNSURE IF TO RETURN TIMESTAMP OR TIME STRING! MAYBE EXTRA VARIABLE FOR THIS?
														$startDate = $value['start_date'];
														if (empty($startDate)) {
															$startDate = '';
														} else {
															$startDate = strtotime($startDate);
															if ($startDate === false) {
																$startDate = '';
															}
														}

														$record->startDate = $startDate;
														// aliases
														$record->start = $startDate;
														*/

		//--------
		// GIFT CARD END DATE
		// TODO: UNSURE IF TO RETURN TIMESTAMP OR TIME STRING! MAYBE EXTRA VARIABLE FOR THIS?
		$endDate = $value['end_date'];
		if (empty($endDate)) {
			$endDate = '';
		} else {
			$endDate = strtotime($endDate);
			if ($endDate === false) {
				$endDate = '';
			}
		}

		$record->endDate = $endDate;
		// aliases
		$record->end = $endDate;

		//--------
		// GIFT CARD DENOMINATION
		$denomination = (float) $value['denomination'];
		$record->denomination = $denomination;
		// aliases
		$record->amount = $denomination;
		$record->value = $denomination;
		$record->redeemable = $denomination;
		$record->giftCardAmount = $denomination;
		$record->giftCardValue = $denomination;

		//--------
		// GIFT CARD BALANCE
		$balance = (float) $value['balance'];
		$record->balance = $balance;
		// aliases
		$record->giftCardBalance = $balance;

		//--------
		// RUNTIME
		// TODO - Will see if necessary to add GCP and GCPV titles or page objects in future

		bdb($record, __METHOD__ . ': $record at line #' . __LINE__);
		$record->setTrackChanges(true); // track changes for the product record TODO? reset instead?

		return $record;
	}

	/**
	 * Given an 'awake' value, as set by wakeupValue, convert the value back to a basic type for storage in DB.
	 *
	 * @param Page $page.
	 * @param Field $field.
	 * @param string|int|array|object $value.
	 * @access public
	 * @return array $sleepValue.
	 *
	 */
	public function ___sleepValue(Page $page, Field $field, $value) {

		$sleepValue = [];

		// if we are given something other than a WireData,
		// then just return a blank array
		if (!$value instanceof WireData) {
			return $sleepValue;
		}

		$sanitizer = $this->wire('sanitizer');

		// END DATE
		// TODO @UPDATE: WE DEFAULT TO NULL; i.e., no expiration date!
		if (!empty($value->endDate)) {
			$endDate = date('Y-m-d H:i:s', $this->_sanitizeValue($value->endDate));
		} else {
			$endDate = NULL;
		}

		// convert records to an array within sleepValue
		$sleepValue = [
			// note: record->giftCardProductID is becoming data which is a required column in a Fieldtype
			'data' => (int) $value->giftCardProductID,
			'gift_card_product_variant_id' => (int) $value->giftCardProductVariantID,
			'customer_email' => $sanitizer->email($value->customerEmail),
			'code' => $sanitizer->text($value->code),
			// TODO @UPDATE NO LONGER IN USE
			// 'start_date' => date('Y-m-d H:i:s', $this->_sanitizeValue($value->startDate)),
			// 'end_date' => date('Y-m-d H:i:s', $this->_sanitizeValue($value->endDate)),
			'end_date' => $endDate,
			'denomination' => (float) $value->denomination,
			'balance' => (float) $value->balance,

		];

		return $sleepValue;
	}

	/**
	 * Return the database schema that defines a Shipping Rate item
	 *
	 */
	public function getDatabaseSchema(Field $field) {

		$schema = parent::getDatabaseSchema($field);

		# +++++++++
		// @NOTE: THE VALUE OF THESE TWO IS 'ZERO' IF THE GC WAS ISSUED MANUALLY!!
		// we reuse this required field/column (data) for item->giftCardProductID [gift_card_product_id]
		$schema['data'] = 'INT(10) UNSIGNED NOT NULL';
		$schema['gift_card_product_variant_id'] = 'INT(10) UNSIGNED NOT NULL';
		# +++++++++
		$schema['customer_email'] = 'VARCHAR(250) NOT NULL';
		$schema['code'] = 'VARCHAR(255) NOT NULL';
		// TODO - NEED TO USE VERY OLD DATE IF START AND/OR END DATE IN USE!
		// TODO @UPDATE NO LONGER IN USE
		// @note: default to current timestamp ONLY; no auto-update
		// $schema['start_date'] = 'DATETIME DEFAULT CURRENT_TIMESTAMP';
		// @note: default to current timestamp ONLY; no auto-update
		// TODO @UPDATE: WE DEFAULT TO NULL; i.e., no expiration date!
		// $schema['end_date'] = 'DATETIME DEFAULT CURRENT_TIMESTAMP';
		$schema['end_date'] = 'DATETIME NULL';
		$schema['denomination'] = 'DECIMAL(12,2) UNSIGNED NOT NULL';
		$schema['balance'] = 'DECIMAL(12,2) UNSIGNED NOT NULL';


		//----------------------------

		// indexes, for any fields that need to be searchable from selectors
		// make all our fields searchable
		$schema['keys']['data'] = 'KEY data (data)'; // for 'gift_card_product_id'
		$schema['keys']['gift_card_product_variant_id'] = 'KEY gift_card_product_variant_id (gift_card_product_variant_id)';
		$schema['keys']['customer_email'] = 'FULLTEXT KEY customer_email (customer_email)';
		$schema['keys']['code'] = 'FULLTEXT KEY code (code)';
		// +++++
		// TODO @UPDATE NO LONGER IN USE
		// $schema['keys']['start_date'] = 'KEY start_date(start_date)';
		// +++++
		$schema['keys']['end_date'] = 'KEY end_date(end_date)';
		$schema['keys']['denomination'] = 'KEY denomination(denomination)';
		$schema['keys']['balance'] = 'KEY balance(balance)';

		return $schema;
	}

	/**
	 * Method called when the field is database-queried from a selector
	 *
	 */
	public function getMatchQuery($query, $table, $subfield, $operator, $value) {

		// match properties/subfields to model subfields/columns
		// if searching by aliases
		if (in_array($subfield, ['giftCardProductID', 'productID', 'gift_card_product_id', 'product_id', 'product'])) {
			$subfield = 'data';
		} else if (in_array($subfield, ['giftCardProductVariantID', 'productVariantID', 'variantID', 'product_variant_id', 'variant_id', 'variant'])) {
			$subfield = 'gift_card_product_variant_id';
		} else if (in_array($subfield, ['customerEmail', 'email'])) {
			$subfield = 'customer_email';
		} else if (in_array($subfield, ['giftCardCode', 'gift_card_code'])) {
			$subfield = 'code';
		} /*else if (in_array($subfield, ['startDate', 'start'])) {
					 // TODO @UPDATE NO LONGER IN USE
							$subfield = 'start_date';
						}*/ else if (in_array($subfield, ['endDate', 'end'])) {
			$subfield = 'end_date';
		} else if (in_array($subfield, ['amount', 'value', 'redeemable', 'giftCardAmount', 'gift_card_amount', 'giftCardValue', 'gift_card_value'])) {
			$subfield = 'denomination';
		} else if (in_array($subfield, ['giftCardBalance', 'gift_card_balance'])) {
			$subfield = 'balance';
		}
		//---------

		/*
																			- MySQL knows what "=" and ">" are, but it doesn't know what "%=", "~=", "^=" OR "$=" are
																			- the latter allow for finer, fulltext search
																			*/
		// if 'normal' sql operators, do 'normal' query, else do fulltext search
		if ($this->wire('database')->isOperator($operator)) {
			return parent::getMatchQuery($query, $table, $subfield, $operator, $value);
		} else {
			$ft = new DatabaseQuerySelectFulltext($query);
			$ft->match($table, $subfield, $operator, $value);
			return $query;
		}
	}
}